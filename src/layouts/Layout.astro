---
interface Props {
	title: string;
}

const { title } = Astro.props;

//View Transitions
import { ViewTransitions } from "astro:transitions";

//Fonts
//Poppins
import "@fontsource/poppins/100.css";
import "@fontsource/poppins/200.css";
import "@fontsource/poppins/300.css";
import "@fontsource/poppins/400.css";
import "@fontsource/poppins/500.css";
import "@fontsource/poppins/600.css";
import "@fontsource/poppins/700.css";
import "@fontsource/poppins/800.css";
import "@fontsource/poppins/900.css";

//Staaliches
import "@fontsource/staatliches";

//Bebas Neue
import "@fontsource/bebas-neue";

//Abel
import "@fontsource/abel";

//Antonio
import "@fontsource-variable/antonio";
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<script
			src="https://kit.fontawesome.com/a1618bce8f.js"
			crossorigin="anonymous"></script>
		<link
			rel="stylesheet"
			href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
			integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
			crossorigin=""
		/>
		<!-- <ViewTransitions></ViewTransitions> -->
	</head>
	<body>
		<slot />
	</body>
</html>
<style is:global lang="scss">
	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
		scroll-behavior: smooth;
	}

	html {
		scroll-behavior: smooth;
	}

	body {
		margin: 0;
		padding: 0;
		font-family: "Poppins", sans-serif;
		background-color: #fbeee0;
		display: flex;
		// width: fit-content;
		overflow-x: scroll;
		overflow-y: hidden;
		-webkit-overflow-scrolling: touch;
	}

	button {
		border: none;
		outline: none;
	}

	a {
		text-decoration: none;
		color: #603b2a;

		&:visited {
			color: #603b2a;
		}

		&:active {
			color: #603b2a;
		}
	}

	/* width */
	::-webkit-scrollbar {
		width: 10px;
	}

	/* Track */
	::-webkit-scrollbar-track {
		//   box-shadow: inset 0 0 5px grey;
		background-color: #e5c6a5;
	}

	/* Handle */
	::-webkit-scrollbar-thumb {
		background: #603b2a;
		width: 1px;
	}

	/* Handle on hover */
	::-webkit-scrollbar-thumb:hover {
		background: #ffa600;
	}

	@media only screen and (max-width: 900px) {
		html {
			overflow-x: hidden;
		}

		body {
			margin: 0;
			padding: 0;
			font-family: "Poppins", sans-serif;
			background-color: #fbeee0;
			display: flex;
			width: fit-content;
			overflow-x: scroll;
			overflow-y: hidden;
			-webkit-overflow-scrolling: touch;
		}

		a {
			text-decoration: none;
			color: #000;

			&:visited {
				color: #000;
			}

			&:active {
				color: #000;
			}
		}

		/* width */
		::-webkit-scrollbar {
			width: 0px;
		}

		/* Track */
		::-webkit-scrollbar-track {
			//   box-shadow: inset 0 0 5px grey;
			background-color: #fbeee0;
		}

		/* Handle */
		::-webkit-scrollbar-thumb {
			background: #603b2a;
			width: 0px;
		}

		/* Handle on hover */
		::-webkit-scrollbar-thumb:hover {
			background: #ffa600;
		}
	}
</style>

<!-- <script is:inline>
	if (window.screen.availWidth >= 900) {
		let item = document.querySelector("html");

		item.addEventListener("wheel", function (e) {
			if (e.deltaY > 0) item.scrollLeft += 250;
			else item.scrollLeft -= 250;
		});
	}
</script> -->

<script is:inline>
	let isScrolling = false;

	const scrollHandler = function (e) {
		const width = window.innerWidth;
		if (width <= 954) return;

		e.preventDefault();

		if (Math.abs(e.deltaY) >= Math.abs(e.deltaX)) {
			document.documentElement.scrollLeft += e.deltaY * 5;
		} else {
			document.documentElement.scrollLeft -= e.deltaX * 5;
		}
	};

	// Función que aplica throttling para el evento de desplazamiento
	const throttledScroll = function (e) {
		if (!isScrolling) {
			isScrolling = true;
			scrollHandler(e);

			setTimeout(() => {
				isScrolling = false;
			}, 200); // Ajusta este valor según lo suave que quieras el desplazamiento
		}
	};

	// Escucha el evento de rueda
	document.documentElement.addEventListener("wheel", throttledScroll, {
		passive: false,
	});
</script>

<!-- <script is:inline>
	window.navigation.addEventListener('navigate', (evt) =>{
		const toUrl = new URL(evt.destination.url)

		if (location.origin !== toUrl.origin) return

		evt.intercept({
			async handler() {
				const response = await fetch(toUrl.pathname);
				const text = await response.text();
			}
		})
	})
</script> -->
